import os
import redis
import asyncio

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

import currency_sender
import currancy_data
from db import DB
from config import StatesTest
from config import currency_storage_euro,currency_storage_usd
from validators import validators
import currency_sender


TOKEN = os.getenv("TOKEN")

data = DB()

redis_ = redis.Redis("127.0.0.1",6379)
bot = Bot(TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())





@dp.message_handler(state="*",commands=["start"])
async def start_func(message: types.Message):

    """
    This one works when you write /start command 

    """
    if data.check_tracked_user(message.from_user.id)[0]:

        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="yes",text="–¢–∞–∫")
        button2 = types.InlineKeyboardButton(callback_data="no",text="–ù—ñ")
        markup.add(button1,button2)

        await message.answer("‚ùóÔ∏è–¢–∏ –≤–∂–µ –º–∞—î—à –∞–∫—Ç–∏–≤–Ω–∏–π —Ç—Ä–µ–∫–µ—Ä.–•–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ?",reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("‚ûï")
        markup.add(button1)
        
        #Change current state to "PREPARE1"
        current = dp.current_state(user=message.from_user.id)
        await current.set_state(StatesTest.all()[0])

        await message.answer("üòÄ–ü—Ä–∏–≤—ñ—Ç,—Ç–µ–±–µ –≤—ñ—Ç–∞—î –±–æ—Ç –¥–ª—è —Ç—Ä–µ–∫—ñ–Ω–∫—É –∫—É—Ä—Å—É,—â–æ–± –∑–∞–¥–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–∫—ñ–Ω–≥—É,–Ω–∞—Ç–∏—Å–Ω–∏ –ø–ª—é—Å–∏–∫ –≤–Ω–∏–∑—É",reply_markup=markup)
    

@dp.message_handler(lambda message: (message.text == "‚ûï"),state=StatesTest.all()[0])
async def preparing_func(message: types.Message):

    """
    This func does some preparations before the setting of some
    user's data
    
    """

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    button = types.KeyboardButton("–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è")
    markup.add(button)

    
    await message.answer(
        "‚úÖ–í–æ—É,—Ç–µ–ø–µ—Ä —Ç–æ–±—ñ —Ç—Ä–µ–±–∞ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ç–∞–∫—ñ –¥–∞–Ω–Ω—ñ:\n\n1)–ö—É—Ä—Å —è–∫–æ—ó –≤–∞–ª—é—Ç–∏ —Ç–∏ —Ö–æ—á–µ—à –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏.\n" + 
        "2)–î—ñ–∞–ø–∞–∑–æ–Ω –∫—É—Ä—Å—É(–≤—ñ–¥)\n" +
        "3)–î—ñ–∞–ø–∞–∑–æ–Ω –∫—É—Ä—Å—É(–¥–æ)\n\n" +
        "üëå–Ü –≤—É–∞–ª—è,—Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–ª–∏ –∫—É—Ä—Å —Ç—ñ—î—ó —á–∏ —ñ–Ω—à–æ—ó –≤–∞–ª—é—Ç–∏" +
        "–æ–ø–∏–Ω–µ—Ç—å—Å—è —É –≤–∫–∞–∑–∞–Ω–æ–º—É —Ç–æ–±–æ—é –ø—Ä–æ–º—ñ–∂–∫—É.\n\n" +
        "–ù—É —â–æ?!–ü–æ—ó—Ö–∞–ª–∏–∏–∏–∏–∏!!!üöó",
        reply_markup=markup
        ) 
    
    #Change state to PREPARE2
    current = dp.current_state(user=message.from_user.id)
    await current.set_state(StatesTest.all()[1])



@dp.message_handler(lambda message: (message.text == "–†–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è"),state = StatesTest.all()[1])
async def set_currency_func(message: types.Message):



    """ 
    This func works when the user tries to set currency 
    he wants to check

    """

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="doll",text="USD")
    button2 = types.InlineKeyboardButton(callback_data="euro",text="EUR")
    markup.add(button1,button2)


    await message.answer("ü§ë–í–≤–µ–¥—ñ—Ç—å –≤–∞–ª—é—Ç—É —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏?",reply_markup=markup)


@dp.message_handler(state=StatesTest.all()[3])
async def diapason_from_set_func(message: types.Message):

    """
    This func valids and sets diapason(from) to redis

    """
        
    if len(message.text) <= 4 and validators.isfloat(message.text):
        previous_entry = redis_.append(str(message.from_user.id),","+message.text)
        if float(message.text) < 25:
            await message.answer("üò¢–ï—Ö—Ö,–¥—É–º–∞—é —Ç–∞–∫–æ–≥–æ —â–∞—Å—Ç—è –≤–∂–µ –Ω–µ —Ç—Ä–∞–ø–∏—Ç—å—Å—è:(\n–¢–µ–ø–µ—Ä –º–∞—î—à –≤–∫–∞–∑–∞—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω(–¥–æ)")
        else:          
            await message.answer("üëç–û–∫,–ø–µ—Ä–µ–π–¥–µ–º–æ –¥–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É(–¥–æ)! –î—É–º–∞—é,—â–æ –≤–∂–µ –∑–Ω–∞—î—à —è–∫ –ø–∏—Å–∞—Ç—å,—Ç–∏ –∂ –∫–æ–¥–µ—Ä)")

        #Change state to TO_DEAPASON
        current = dp.current_state(user=message.from_user.id)
        await current.set_state(StatesTest.all()[4])
    else:
        await message.answer("‚ùóÔ∏è–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω,–±–æ —â–æ—Å—å –Ω–µ —Ç–∞–∫")


@dp.message_handler(state=StatesTest.all()[4])
async def diapason_to_set_func(message: types.Message):

    """
    This func valids and sets diapason(to) to redis

    """

    if len(message.text) <= 4 and validators.isfloat(message.text):

        range_from = redis_.get(str(message.from_user.id)).decode("utf-8").split(",")[1]

        if validators.isappropriate(range_from,message.text):
            previous_entry = redis_.append(str(message.from_user.id),","+message.text)

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton(text="üí§–í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è")
            button2 = types.KeyboardButton(text="üîç–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")

            markup.add(button1,button2)

            user_data = redis_.get(str(message.from_user.id)).decode("utf-8").split(",")

            if data.check_tracked_user(message.from_user.id)[0]:
                data.update_tracked_user_data(
                    str(message.from_user.id),
                    user_data[0],
                    user_data[1],
                    user_data[2],
                    )
            else:
                data.write_track_currancy(
                    str(message.from_user.id),
                    user_data[0],
                    user_data[1],
                    user_data[2],
                    )

            #Change state to MENU
            current = dp.current_state(user=message.from_user.id)
            await current.set_state(StatesTest.all()[5])

            await message.answer("‚úÖ–û—Å—å —ñ –≤—Å–µ,—Ç–µ–ø–µ—Ä,–∫–æ–ª–∏ –∫—É—Ä—Å –±—É–¥–µ –≤ –º–µ–∂–∞—Ö –¥–∞–Ω–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å,—Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n–ê –ø–æ–∫–∏ –º–æ–∂–µ—à –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –º–µ–Ω—é:)",reply_markup=markup)
        else:
            await message.answer("‚ùóÔ∏è–î—ñ–∞–ø–∞–∑–æ–Ω(–¥–æ) –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω—É(–≤—ñ–¥),–∞–±–æ –∂ –±—É—Ç–∏ –º–µ–Ω—à–∏–º –∑–∞ –Ω—å–æ–≥–æ\n–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π!")
    else:
        await message.answer("‚ùóÔ∏è–ü–µ—Ä–µ–≤—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω,–±–æ —â–æ—Å—å –Ω–µ —Ç–∞–∫")


@dp.message_handler(lambda message: (message.text == "üîç–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"),state=StatesTest.all()[5])
async def info_menu(message: types.Message):

    """
    This func answers user on his query made by pressing the button "Info"

    """

    await message.answer("üëå–í–æ—É,—Ç–∏ —É –ø—É–Ω–∫—Ç—ñ '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'\n–¢—É—Ç –Ω–µ–º–∞ –Ω—ñ—á–æ–≥–æ —Ç–∞–∫–æ–≥–æ —Ü—ñ–∫–∞–≤–æ–≥–æ,–æ–∫—Ä—ñ–º —Ç–æ–≥–æ,—â–æ —Ç–∏ –º–æ–∂–µ—à–µ –ø–æ–±–∞—á–∏—Ç–∏ —ñ–º'—è —Å–∞–º–æ—ó –≤–∏—Å–æ–∫–æ—Å—Ç—ñ –Ø—Ä–æ—Å–ª–∞–≤–∞,–æ–∫—Ä—ñ–º –ø–æ—Å–∞–¥–∏ –∫–æ—Ä–æ–ª—è,–∑–∞–π–º–∞—é—á–∏–π –ø–æ—Å–∞–¥—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ —Å—ñ—è —á—É–¥–∞")



@dp.message_handler(lambda message: (message.text == "üí§–í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è"),state=StatesTest.all()[5])
async def status_menu(message: types.Message):

    """
    This func answers user on his query made by pressing button "Tracks"

    """
    if DB().tracked_user_data(str(message.from_user.id)):
        currency,curr_from,curr_to = DB().tracked_user_data(str(message.from_user.id))[0]
    
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="delete",text="‚õîÔ∏è–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–µ–∫")
        markup.add(button1)

        await message.answer(f"–¢–∏ –º–∞—î—à –æ—Å—å —Ç–∞–∫–∏–π —Ç—Ä–µ–∫:\n–í–∞–ª—é—Ç–∞ - {currency}\n–î—ñ–∞–ø–∞–∑–æ–Ω(–≤—ñ–¥) - {curr_from}\n–î—ñ–∞–ø–∞–∑–æ–Ω(–¥–æ) - {curr_to}",reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="want",text="–•–æ—á—É!")

        markup.add(button1)

        await message.answer("–°—Ö–æ–∂–µ,—â–æ —É —Ç–µ–±–µ –≤–∂–µ –Ω–µ–º–∞—î —Ç—Ä–µ–∫—ñ–≤,—è–∫—â–æ —Ö–æ—á–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π‚ÅâÔ∏è",reply_markup=markup)

@dp.message_handler(state="*")
async def not_handled_message(message: types.Message):

    """
    This func can be handled when your message is not good for others

    """

    await message.answer("‚ùóÔ∏è–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –∑ –º–µ–Ω—é")



@dp.callback_query_handler(lambda callback: (True),state="*")
async def agree_func(callback: types.CallbackQuery):

    """
    This func answers user on his queries made by pressing inline buttons 

    """

    def _create_track_make_keyboard():

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("‚ûï")
        markup.add(button1)

        return markup

    if callback.data == "yes":

        #Change state to PREPARE1
        current = dp.current_state(user=callback.from_user.id)
        await current.set_state(StatesTest.all()[0])

        keyboard = _create_track_make_keyboard()

        await bot.send_message(callback.message.chat.id,"üòå–û–∫,—Ç–µ–ø–µ—Ä –Ω–∞—Ç–∏—Å–Ω–∏ –ø–ª—é—Å–∏–∫ –∑–Ω–∏–∑—É",reply_markup=keyboard)
        
    elif callback.data == "no":

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton(text="üí§–í—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è")
        button2 = types.KeyboardButton(text="üîç–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")

        #Chnage state to MENU
        current = dp.current_state(user=callback.from_user.id)
        await current.set_state(StatesTest.all()[5])

        markup.add(button1,button2)
        await bot.send_message(callback.message.chat.id,"ü§£–ù—É –¥–æ–±—Ä–µ!–ó–∞—Ö–æ–¥—å —É –º–µ–Ω—é)",reply_markup=markup)

    elif callback.data == "delete":

        data.del_tracked_user(callback.from_user.id)

        #Change state to PREPARE1
        current = dp.current_state(user=callback.from_user.id)
        await current.set_state(StatesTest.all()[0])

        keyboard = _create_track_make_keyboard()

        await bot.send_message(callback.message.chat.id,"‚úÖ–¢—Ä–µ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ,—Ç–µ–ø–µ—Ä –≤–∏–∫–æ–Ω–∞–π —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–∏–∂—á–µ.–ê –Ω–∞—Å–∞–º–ø–µ—Ä–µ–¥ –Ω–∞—Ç–∏—Å–Ω—É –ø–ª—é—Å–∏–∫ –∑–Ω–∏–∑—É",reply_markup=keyboard)

    elif callback.data == "want":

        current = dp.current_state(user=callback.from_user.id)
        await current.set_state(StatesTest.all()[0])

        keyboard = _create_track_make_keyboard()

        await bot.send_message(callback.message.chat.id,"üòú–†–æ–±–∏ –≤—Å–µ –ø–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –Ω–∏–∂—á–µ",reply_markup=keyboard)

    elif callback.data == "doll":

        #Change state to FROM_DEAPASON
        current = dp.current_state(user=callback.from_user.id)
        await current.set_state(StatesTest.all()[3])

        redis_.set(str(callback.from_user.id),"USD")
        await bot.send_message(callback.message.chat.id,"üôå–î–æ–±—Ä–µ,–Ω—É —â–æ,–¥–∞–≤–∞–π —Ç–µ–ø–µ—Ä –∑–∞–ø–æ–≤–Ω–∏–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω(–≤—ñ–¥)!\n–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ –ø—Ä–∏–∫–ª–∞–¥—É –Ω–∏–∂—á–µ\n'27.3'")
        

    elif callback.data == "euro":

        #Change state to FROM_DEAPASON
        current = dp.current_state(user=callback.from_user.id)
        await current.set_state(StatesTest.all()[3])

        redis_.set(str(callback.from_user.id),"EUR")
        await bot.send_message(callback.message.chat.id,"üôå–î–æ–±—Ä–µ,–Ω—É —â–æ,–¥–∞–≤–∞–π —Ç–µ–ø–µ—Ä –∑–∞–ø–æ–≤–Ω–∏–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω(–≤—ñ–¥)!\n–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ –ø—Ä–∏–∫–ª–∞–¥—É –Ω–∏–∂—á–µ\n'27.3'")
        

if __name__ == "__main__":

    #Make loop on three tasks (controllers,currency_data,currency_sender)

    loop = asyncio.get_event_loop()
    loop.create_task(currency_sender.cheker(bot,types))
    loop.create_task(currancy_data.get_data())
    executor.start_polling(dp,skip_updates=True,loop=loop)
    
